"""
Реализовать скрипт, в котором должна быть предусмотрена функция
расчета заработной платы сотрудника. В расчете необходимо использовать формулу:
(выработка в часах*ставка в час) + премия. Для выполнения расчета для конкретных
значений необходимо запускать скрипт с параметрами.
"""
from sys import argv

file_name, hour, rate, bonus = argv

calculation = (int(hour) * int(rate)) + int(bonus)
print(f"Плата составляет: {calculation}")
print()

"""
Представлен список чисел. Необходимо вывести элементы исходного списка,
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].

Реализуйте вариант без генератора и с генератором
"""
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

# без генератора

list_1 = 0
new = []
for el in my_list:
    if el > my_list[list_1 - 1]:
        new.append(el)
    list_1 += 1
print(new)

# c генератором

list_2 = [el for el in my_list if el > my_list[my_list.index(el) - 1]]
print(new)
print()

"""
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генераторное выражение.
"""
num = range(20, 241)
my_list = [el for el in num if el % 20 == 0 or el % 21 == 0]
print(my_list)
print()

"""
Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генераторное выржаение.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""
my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
res_list = [el for el in my_list if my_list.count(el) == 1]
print(res_list)
print()

"""
Реализовать формирование списка, используя функцию range()
и возможности генераторного выражения.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать лямбда-функцию и функцию reduce().
"""
from functools import reduce

my_list = [el for el in range(100, 1001) if el % 2 == 0]

print(my_list)


def my_func(prev_el, el):
    return prev_el * el


print(f'Результат: {reduce(my_func, my_list)}')
print()

"""
Реализовать генератор с помощью функции с ключевым словом yield,
 создающим очередное значение.

 При вызове функции должен создаваться объект-генератор.
 Функция должна вызываться следующим образом: for el in fact(n).
 Функция отвечает за получение факториала числа,
 а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.

Подсказка: факториал числа n — произведение чисел от 1 до n.
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""
from itertools import count
from math import factorial


def fact():
    for el in count(1):
        yield factorial(el)


gen = fact()
x = 0
for i in gen:
    if x < 4:
        print(i)
        x += 1
    else:
        break
